#pragma once

#include <QVector3D>
#include <QOpenGLWidget>
#include <QOpenGLExtraFunctions>
#include <QOpenGLShaderProgram>
#include <QOpenGLVertexArrayObject>
#include "object.h"
#include <vector>
#include "light.h"
#include "scene.h"

class RayTracing;
class PathTracing;

/**
 * @brief The Renderer class implements a rasterization renderer that uses OpenGL
 * functions and shaders in GLSL to render a scene. The Render class also stores other
 * types of renderers like Ray Tracing and Path Tracing. It inherits of The QOpenGLWidget
 * that makes it possible to draw in the Qt window. It also inherits of QOpenGLExtraFunctions
 * to be able to use all the OpenGL functions.
 *
 * @author Bianca Fragoso
 */
class Renderer  : public QOpenGLWidget, protected QOpenGLExtraFunctions
{

public:

    /**
     * @brief The Renderer default constructor.
     * @param parent The window that it s the Renderer parent.
     */
    Renderer(QWidget* parent);

    /**
     * @brief The Renderer default destructor.
     */
    ~Renderer();

    /**
     * @brief The Camera properties.
     */
    struct Camera
    {
        /**
         * @brief eye The camera eye is the position of the C
         */
        QVector3D eye;

        /**
         * @brief center It's the direction of the center of the camera.
         */
        QVector3D center;

        /**
         * @brief up It's the inclination of the camera.
         */
        QVector3D up;

        /**
         * @brief fov It's the field of vision. The opening angle of the camera.
         */
        float fov;

        /**
         * @brief zNear It's the closer distance of the camera that will be considered.
         */
        float zNear;

        /**
         * @brief zFar It's the bigger distance of the camera that will be considered.
         */
        float zFar;

    };

    /**
     * @brief Gets the image generated by the Renderer ray tracer.
     * @param time The time that was taked to render the image with the ray tracer.
     * @return The result image of the ray tracer.
     */
    QImage getRayTracedImage(float &time);

    /**
     * @brief Gets the image generated by the Renderer path tracer.
     * @param time The time that was taked to render the image with the path tracer.
     * @return The result image of the path tracer.
     */
    QImage getPathTracedImage(float &time);

    /**
     * @brief Sets the number of rays by pixel that will be used in the Ray Tracer and the Path Tracer.
     * @param rays The number of rays.
     */
    void setNumberOfRays(unsigned int rays);

    /**
     * @brief Sets the scene that will be draw by all the renderers.
     * @param scene The new scene.
     */
    void setScene(Scene scene);

    /**
     * @brief Sets the eye, that represents the camera position.
     * @param eye The new eye position.
     */
    void setEye(QVector3D eye);

    /**
     * @brief Gets the vector that counts the ray hit for each type of object.
     * @return A vector with 4 elements, each representing the count for a type of object.
     */
    std::vector<unsigned int> getCountVector();

private:

    /**
     * @brief Initializes all the openGL functions, the OpenGL
     * context and initializes all the objects of the scene.
     */
    virtual void initializeGL() override;

    /**
     * @brief Renders the scene using OpenGL.
     */
    virtual void paintGL() override;

    /**
     * @brief Resizes the window updating the viewport.
     * @param w The window's new width.
     * @param h The window's new height.
     */
    virtual void resizeGL(int w, int h) override;

    /**
     * @brief The first point clicked and considered by the arcball tool.
     */
    QVector3D _p0;

    /**
     * @brief  The second point clicked and considered by the arcball tool.
     */
    QVector3D _p1;

    /**
     * @brief The radius of the arcball's sphere.
     */
    double _radius;

    /**
     * @brief Computes the point of the sphere based on the point clicked on the screen.
     * @param pointT The screen point that was clicked.
     * @return A 3D vector with the point in the sphere used in the arcball tool.
     */
    QVector3D Points_Sphere(QVector3D pointT);

    /**
     * @brief The slot called when the mouse is pressed.
     * @param event The mouse press event.
     */
    virtual void mousePressEvent(QMouseEvent *event) override;

    /**
     * @brief The slot called when the mouse is released.
     * @param event The mouse released event.
     */
    virtual void mouseReleaseEvent(QMouseEvent *event) override;

    /**
     * @brief The slot called when the mouse is moved.
     * @param event The mouse move event.
     */
    virtual void mouseMoveEvent(QMouseEvent *event) override;

    /**
     * @brief The slot called when the wheel of the mouse is used.
     * @param event The wheel event.
     */
    virtual void wheelEvent(QWheelEvent *event) override;

private:

    /**
     * @brief The model matrix that has the arcball's rotation transformation.
     */
    QMatrix4x4 _model;

    /**
     * @brief The projection matrix.
     */
    QMatrix4x4 _proj;

    /**
     * @brief The view matrix.
     */
    QMatrix4x4 _view;


    /**
     * @brief The camera properties.
     */
    Camera _camera;


    /**
     * @brief _mousepress
     */
    bool _mousepress = false;

    /**
     * @brief The scene that will be rendered.
     */
    Scene _scene;

    /**
     * @brief The ray tracer renderer.
     */
    RayTracing *_rayTracer;

    /**
     * @brief The ray tracer renderer.
     */
    PathTracing * _pathTracer;

    /**
     * @brief A boolean that indicates if the initialize function was already called.
     */
    bool _isInitialized = false;
};

